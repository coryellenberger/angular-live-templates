<templateSet group="AngularStandard">
  <template name="ngapp" value="/**&#10; * $moduleName$&#10; * @namespace $moduleName$&#10; */&#10;(function () {&#10;  angular&#10;    .module('$moduleName$', [&#10;      '$dependency$'$END$&#10;    ])&#10;})()&#10;$END$" description="Creates an Angular module setter" toReformat="true" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="dependency" expression="" defaultValue="&quot;dependency&quot;" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ngconfig" value=".config($config$)&#10;&#10;$config$.$inject = ['$dependency$'];&#10;&#10;function $config$ ($dependency$) {&#10;  $configFunction$&#10;}$END$" description="Defines a configuration phase function" toReformat="false" toShortenFQNames="true">
    <variable name="config" expression="" defaultValue="&quot;config&quot;" alwaysStopAt="true" />
    <variable name="dependency" expression="" defaultValue="&quot;dependency&quot;" alwaysStopAt="true" />
    <variable name="configFunction" expression="" defaultValue="&quot;code&quot;" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ngcontroller" value="/**&#10; * $ControllerName$&#10; * @namespace Controllers&#10; */&#10;(function () {&#10;  angular&#10;    .module('$moduleName$')&#10;    .controller('$ControllerName$', $ControllerName$)&#10;&#10;  $ControllerName$.$inject = ['$dependency$']&#10;  &#10;  /**&#10;   * @namespace $ControllerName$&#10;   * @desc ViewModel for $templateName$.view.html&#10;   * @memberOf Controllers&#10;   */&#10;  function $ControllerName$ ($dependency$) {&#10;    var vm = this&#10;    vm.title = '$ControllerName$'&#10;    vm.$functionName$ = $functionName$&#10;    /**&#10;     * @name $functionName$&#10;     * @desc description&#10;     * @param {String} $paramName$ description&#10;     * @returns {String} $returnValName$ description&#10;     * @memberOf Controllers.$ControllerName$&#10;     */&#10;    function $functionName$ ($paramName$) {&#10;      return $paramName$&#10;    }&#10;  }&#10;})()&#10;&#10;/**&#10; * THIS WAS GENERATED TO BE MOVED TO SPEC.js FILE&#10; */&#10;&#10;describe('$ControllerName$', function () {&#10;  beforeEach(module('$moduleName$'))&#10;&#10;  var $controller&#10;  var $dependency$&#10;&#10;  beforeEach(inject(function (_$controller_, _$dependency$_) {&#10;    $controller = _$controller_&#10;    $dependency$ = _$dependency$_&#10;  }))&#10;&#10;  it('should have $functionName$ and return param passed', function () {&#10;    var controller = $controller('$ControllerName$', {&#10;      $dependency$: $dependency$&#10;    })&#10;&#10;    expect(controller.$functionName$).toBeDefined()&#10;    var value = '$testValue$'&#10;    expect(controller.$functionName$(value)).toEqual(value)&#10;  })&#10;})&#10;&#10;$END$" description="Creates an Angular controller" toReformat="true" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="ControllerName" expression="" defaultValue="&quot;ControllerName&quot;" alwaysStopAt="true" />
    <variable name="dependency" expression="" defaultValue="&quot;dependency&quot;" alwaysStopAt="true" />
    <variable name="templateName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="functionName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="paramName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="returnValName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="testValue" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ngdirective" value="/**&#10; * $directiveName$&#10; * @namespace Directives&#10; */&#10;(function () {&#10;  angular&#10;    .module('$moduleName$')&#10;    .directive('$directiveName$', $directiveName$)&#10;&#10;  $directiveName$.$inject = ['$dependency$']&#10;&#10;  /**&#10;   * @namespace $directiveName$&#10;   * @desc description&#10;   * @memberOf Directives&#10;   */&#10;  function $directiveName$ ($dependency$) {&#10;    var directive = {&#10;      template: '&lt;span&gt;$directiveName$&lt;/span&gt;',&#10;      bindToController: true,&#10;      controller: $ControllerName$,&#10;      controllerAs: 'vm',&#10;      link: link,&#10;      restrict: 'A',&#10;      scope: {}&#10;    }&#10;    return directive&#10;&#10;    function link (scope, element, attrs) {&#10;      $linkFunction$&#10;    }&#10;  }&#10;&#10;  $ControllerName$.$inject = ['$controllerDependency$']&#10;  &#10;  /**&#10;   * @namespace $ControllerName$&#10;   * @desc description&#10;   * @memberOf Directives.$directiveName$&#10;   */&#10;  function $ControllerName$ ($dependency$) {&#10;    var vm = this&#10;    vm.$functionName$ = $functionName$&#10;    /**&#10;     * @name $functionName$&#10;     * @desc description&#10;     * @param {String} $paramName$ description&#10;     * @returns {String} $returnValName$ description&#10;     * @memberOf Directives.$directiveName$.$ControllerName$&#10;     */&#10;    function $functionName$ ($paramName$) {&#10;      return $paramName$&#10;    }&#10;  }&#10;})()&#10;&#10;/**&#10; * THIS WAS GENERATED TO BE MOVED TO SPEC.js FILE&#10; */&#10;&#10;describe('$directiveName$', function () {&#10;  beforeEach(module('$moduleName$'))&#10;&#10;  var compile&#10;  var scope&#10;  var directiveElem&#10;&#10;  beforeEach(inject(function (_$compile_, _$rootScope_) {&#10;    compile = _$compile_&#10;    scope = _$rootScope_.$new()&#10;&#10;    directiveElem = getCompiledElement()&#10;&#10;    function getCompiledElement () {&#10;      var element = angular.element('&lt;div $directiveElement$&gt;&lt;/div&gt;')&#10;      var compiledElement = compile(element)(scope)&#10;      scope.$digest()&#10;      return compiledElement&#10;    }&#10;  }))&#10;&#10;  it('should have exampleFunction and return param passed', function () {&#10;    var spanElement = directiveElem.find('span')&#10;    expect(spanElement).toBeDefined()&#10;    expect(spanElement.text()).toEqual('$directiveName$')&#10;  })&#10;})&#10;&#10;$END$" description="Creates an Angular directive" toReformat="true" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="directiveName" expression="" defaultValue="&quot;directiveName&quot;" alwaysStopAt="true" />
    <variable name="dependency" expression="" defaultValue="&quot;dependency&quot;" alwaysStopAt="true" />
    <variable name="ControllerName" expression="" defaultValue="&quot;ControllerName&quot;" alwaysStopAt="true" />
    <variable name="linkFunction" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controllerDependency" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="functionName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="paramName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="returnValName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="directiveElement" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ngfactory" value="/**&#10; * $factoryName$&#10; * @namespace Factories&#10; */&#10;(function () {&#10;  angular&#10;    .module('$moduleName$')&#10;    .factory('$factoryName$', $factoryName$)&#10;&#10;  $factoryName$.$inject = ['$dependency$']&#10;&#10;  /**&#10;   * @namespace $factoryName$&#10;   * @desc description&#10;   * @memberOf Factories&#10;   */&#10;  function $factoryName$ ($dependency$) {&#10;    var service = {&#10;      $functionName$: $functionName$&#10;    }&#10;    return service&#10;&#10;    /**&#10;     * @name $functionName$&#10;     * @desc description&#10;     * @param {String} $paramName$ description&#10;     * @returns {String} $returnValName$ description&#10;     * @memberOf Factories.$factoryName$&#10;     */&#10;    function $functionName$ ($paramName$) {&#10;      return $paramName$&#10;    }&#10;  }&#10;})()&#10;&#10;/**&#10; * THIS WAS GENERATED TO BE MOVED TO SPEC.js FILE&#10; */&#10;&#10;describe('ExampleFactory', function () {&#10;  beforeEach(module('$moduleName$'))&#10;&#10;  var $factoryName$&#10;&#10;  beforeEach(inject(function (_$factoryName$_) {&#10;    $factoryName$ = _$factoryName$_&#10;  }))&#10;&#10;  it('should have exampleFunction and return param passed', function () {&#10;    expect($factoryName$.$functionName$).toBeDefined()&#10;    var value = 'TEST'&#10;    expect($factoryName$.$functionName$(value)).toEqual(value)&#10;  })&#10;})&#10;&#10;$END$" description="Creates an Angular factory" toReformat="true" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="factoryName" expression="" defaultValue="&quot;factoryName&quot;" alwaysStopAt="true" />
    <variable name="dependency" expression="" defaultValue="&quot;dependency&quot;" alwaysStopAt="true" />
    <variable name="functionName" expression="" defaultValue="&quot;functionName&quot;" alwaysStopAt="true" />
    <variable name="paramName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="returnValName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ngfilter" value="/**&#10; * $filterName$&#10; * @namespace Filters&#10; */&#10;(function () {&#10;  angular&#10;    .module('$moduleName$')&#10;    .filter('$filterName$', $filterName$)&#10;&#10;  /**&#10;   * @namespace $filterName$&#10;   * @desc description&#10;   * @param {String} $paramName$ description&#10;   * @returns {String} $returnValName$ description&#10;   * @memberOf Filters&#10;   */&#10;  function $filterName$ () {&#10;    return function ($paramName$) {&#10;      return $paramname$&#10;    }&#10;  }&#10;})()&#10;&#10;/**&#10; * THIS WAS GENERATED TO BE MOVED TO SPEC.js FILE&#10; */&#10;&#10;describe('$filterName$', function () {&#10;  beforeEach(module('$moduleName$'))&#10;&#10;  var $filterName$Filter&#10;&#10;  beforeEach(inject(function (_$filterName$Filter_) {&#10;    $filterName$Filter = _$filterName$Filter_&#10;  }))&#10;&#10;  it('should have $filterName$Filter and return param passed', function () {&#10;    expect($filterName$Filter).toBeDefined()&#10;    var value = 'TEST'&#10;    expect($filterName$Filter(value)).toEqual(value)&#10;  })&#10;})&#10;&#10;$END$" description="Creates an Angular filter" toReformat="true" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="filterName" expression="" defaultValue="&quot;filterName&quot;" alwaysStopAt="true" />
    <variable name="paramName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="returnValName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="paramname" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ngmodule" value="angular&#10;  .module('$moduleName$')&#10;  $END$" description="Creates an Angular module getter" toReformat="false" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="&quot;module&quot;" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ngroute" value=".when('/$url$', {&#10;  templateUrl: '$template$.html',&#10;  controller: '$ControllerName$',&#10;  controllerAs: '$vm$'&#10;})$END$" description="Defines an Angular ngRoute 'when' definition" toReformat="false" toShortenFQNames="true">
    <variable name="url" expression="" defaultValue="&quot;url&quot;" alwaysStopAt="true" />
    <variable name="template" expression="" defaultValue="&quot;template&quot;" alwaysStopAt="true" />
    <variable name="ControllerName" expression="" defaultValue="&quot;ControllerName&quot;" alwaysStopAt="true" />
    <variable name="vm" expression="" defaultValue="&quot;vm&quot;" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ngrun" value=".run(run$runName$)&#10;&#10;run$runName$.$inject = ['$dependency$'];&#10;&#10;function run$runName$ ($dependency$) {&#10;  $runNameFunction$&#10;}$END$" description="Defines a run phase function" toReformat="false" toShortenFQNames="true">
    <variable name="runName" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="dependency" expression="" defaultValue="&quot;dependency&quot;" alwaysStopAt="true" />
    <variable name="runNameFunction" expression="" defaultValue="&quot;code&quot;" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ngservice" value="/**&#10; * $serviceName$&#10; * @namespace Services&#10; */&#10;(function () {&#10;  angular&#10;    .module('$moduleName$')&#10;    .service('$serviceName$', $serviceName$)&#10;&#10;  $serviceName$.$inject = ['$dependency$']&#10;&#10;  /**&#10;   * @namespace $serviceName$&#10;   * @desc description&#10;   * @memberOf Services&#10;   */&#10;  function $serviceName$ ($dependency$) {&#10;    this.$functionName$ = $functionName$&#10;&#10;    /**&#10;     * @name $functionName$&#10;     * @desc description&#10;     * @param {String} $paramName$ description&#10;     * @returns {String} $returnValName$ description&#10;     * @memberOf Services.$serviceName$&#10;     */&#10;    function $functionName$ ($paramName$) {&#10;      return $paramName$&#10;    }&#10;  }&#10;})()&#10;&#10;/**&#10; * THIS WAS GENERATED TO BE MOVED TO SPEC.js FILE&#10; */&#10;&#10;describe('$serviceName$', function () {&#10;  beforeEach(module('$moduleName$'))&#10;&#10;  var $serviceName$&#10;&#10;  beforeEach(inject(function (_$serviceName$_) {&#10;    $serviceName$ = _$serviceName$_&#10;  }))&#10;&#10;  it('should have $functionName$ and return param passed', function () {&#10;    expect($serviceName$.$functionName$).toBeDefined()&#10;    var value = 'TEST'&#10;    expect($serviceName$.$functionName$(value)).toEqual(value)&#10;  })&#10;})&#10;&#10;$END$" description="Creates an Angular service" toReformat="true" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="&quot;moduleName&quot;" alwaysStopAt="true" />
    <variable name="serviceName" expression="" defaultValue="&quot;serviceName&quot;" alwaysStopAt="true" />
    <variable name="dependency" expression="" defaultValue="&quot;dependency&quot;" alwaysStopAt="true" />
    <variable name="functionName" expression="" defaultValue="&quot;functionName&quot;" alwaysStopAt="true" />
    <variable name="paramName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="returnValName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ngstate" value=".state('$state$', {&#10;  url: '/$url$',&#10;  templateUrl: '$template$.html',&#10;  controller: '$ControllerName$',&#10;  controllerAs: '$vm$'&#10;})$END$" description="Creates an Angular UI Router state defintion" toReformat="false" toShortenFQNames="true">
    <variable name="state" expression="" defaultValue="&quot;state&quot;" alwaysStopAt="true" />
    <variable name="url" expression="" defaultValue="&quot;url&quot;" alwaysStopAt="true" />
    <variable name="template" expression="" defaultValue="&quot;template&quot;" alwaysStopAt="true" />
    <variable name="ControllerName" expression="" defaultValue="&quot;ControllerName&quot;" alwaysStopAt="true" />
    <variable name="vm" expression="" defaultValue="&quot;vm&quot;" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
</templateSet>